<script src="/js/setup.js"></script>

<!-- main app canvas page 1 -->
<div id='page 1'>

	<!-- control panel -->
	<div id="videoListBox">
		<h3>Video List</h3>
		<div>
			<div class="buttonPanel">
				<button id="uploadButton" >Add Video</button>
			</div>
			<div class="imgGrid">
		<ul id="availableVideosToBranch">
		<%  
			id=1;
			app.locals.videoA.each(function(video){ 
			 %>
			 <li vidId="<%= id %>"> 
			 	<img class="videoListThumbnail" src="/image/A/<%= id %>A.png" />
			 </li>
			<% 
			id++
			 });
		%>
		</ul>
			</div>
		</div>

		<h3>Hotspot Linking Tools</h3>
		<div>
			<div class="buttonPanel">		
			<button id="save">Save Hotspots</button>
			<button id="clear" >Clear Hotspots</button>
			</div>
		</div>
	</div> <!-- /videoListBox -->
	<div id="canvas">
	</div>
</div><!-- /page 1 -->

<!-- video selection dialog for linking hotspots -->
<div title="Select Next Video" id="dialog">
	<div class="imgGrid">
		<ul id="thumbnailsForBranchSelection" class="selectable hidden">
		<%  
			id=1;
			app.locals.videoA.each(function(video){ 
		 %>
		 <li id="<%= id %>" > 
			<a href="#" class="linkButton" ><img src="/image/A/<%= id %>A.png" /></a>
		 </li>
		<% 
			id++
			 });
		%>
		</ul>
	</div>
</div>

<!-- new media upload box -->
<div title="Upload New Media" id="uploadPanel" class="hidden" >
	<div id="uploadBox">
			<label for="fileBox">Browse... </label>
			<input type="file" id="FileBox">
			<br />
			<label for="nameBox">Name: </label><input type="text" id="nameBox">
	</div>
</div>


<script type="text/javascript" >
$(".selectable").selectable();
$("#videoListBox").accordion();

$(function(){

// Draw hotspots on canvas to trace where the video should link to.
    var x1, y1;
    $("#canvas").mousedown(function (e) {
    	console.log(e.target);
        
        //detect if the click is on a close, delete the send hotspot box, return the click.
        if ($(event.target).hasClass("close") ) {
        	console.log('close');
        	$(event.target).parent().remove();
        	return false;
	    }

	    // On clicking an existing video hotspot, make a modal of available branch videos appear.
	    // this needs to be functionified to make it pop on clicking Thumb, too.
		    if ($(event.target).hasClass('send-video')) {
		    var spot = $(event.target);
		    var nextVideoInBranch;
			console.log('send-video hotspot clicked');
			
			// Dialog of available videos
		    $('#dialog').dialog({
		        modal: true,
		        buttons: [{
		            text: "Set",
		            click: function () {
		                nextVideoInBranch = $('.ui-selected').attr('id');
		                $(spot).attr('nextVid', nextVideoInBranch)
		                $(".thumb", spot).html('<img src="/image/A/' + nextVideoInBranch +'A.png" />');
		                $(this).dialog("destroy");
		                $('#thumbnailsForBranchSelection').addClass('hidden');
		            }
		        }, {
		            text: "Cancel",
		            click: function () {
		                $(this).dialog("destroy");
		                $('#thumbnailsForBranchSelection').addClass('hidden');
		            }
		        }],
		        maxHeight: 500,
		        position: {
		            my: "center top",
		            at: "center top",
		            of: "#canvas"
		        }
		    });
			    $(event.target).attr('id', nextVideoInBranch);
			    $('#thumbnailsForBranchSelection').removeClass('hidden')
			    $('.ui-selectee').removeClass('ui-selected');
	    }

	    // begin drawing boxes for hotspots.
        if (e.target !== this) return; // if it's not over the canvas, don't do any of the following.
        console.log('mousedown on canvas detected');
        $("#current").attr({
            id: ''
        });

        var box = $('<div class="send-video box-setup" ></div>');
        $(this).append(box);

        var parentOffset = $(this).parent().offset();
        x1 = e.pageX - parentOffset.left;
        y1 = e.pageY - parentOffset.top;

        box.attr({
            id: 'current'
        });

        box.css({
            top: y1, //offsets
            left: x1, //offsets
        });
    });

// when the mouse moves, extend the box.
    $("#canvas").mousemove(function (e) {
        var w = e.pageX - x1;
        var h = e.pageY - y1;
        $("#current").css({
            width: w, //offsets
            height: h, //offsets
        });
    });

// When the mouse stops moving, create the box
    $("#canvas").mouseup(function () {
    	$('#current').append('<button class="close">X</button><div class="thumb">Click to set branch.</div>');
    	console.log($('#current').attr('style'));
        $("#current")
        	.removeClass('box-setup')
            .attr({
                id: ''
            });

    });

    // select a video from the thumbnail list of available videos in order to set spots on it
	$('.videoListThumbnail').click(function() {
		// store any existing image links to their JSON
		if ($('.send-video').length && $('.send-video').attr('nextVid') ){
			var current = $("#canvas").attr('vidId');
			var links = [current];

			$(".send-video").each(function (index) {
				  var $video = $(this);
				
				  var obj = {
					id: $video.attr("nextVid"),
					left: $video.offset().left,
					top: $video.offset().top,
					width: $video.width(),
					height: $video.height(),
					link: $video.attr("nextVid")
			  };
			
			  links.push(obj);

			});
			
			message('emitted \'' + JSON.stringify(links) + '\'');
			socket.emit('setup event', links);
		}

		// clear hotspots already drawn
		    $("div.send-video").remove();

		// change the background image to a new background image
			var imgSrc = $(this).attr('src');
			var vidId = $(this).parent().attr('vidId');
			$('.highlight').removeClass('highlight');
			$(event.target).parent().addClass('highlight');
			$('#canvas').css(
					{
					    'background': 'url('+ imgSrc +') no-repeat fixed center',
						'background-size': '720px'
	    			}).attr('vidId', vidId);
		
		// Is there already a json for this? Then put those hotspots onscreen.
			$.getJSON('/tmp/'+vidId+'.json', function(data) {
			    for (var i in data.spots) {
					var skeleton = $('<div class="send-video"><button class="close">X</button><div class="thumb">Click to set branch.</div></div>');
		        	$(skeleton).css('top', data.spots[i].top);
		        	$(skeleton).css('left', data.spots[i].left);
		        	$(skeleton).css('width', data.spots[i].width);
		        	$(skeleton).css('height', data.spots[i].height);
		        	if (data.spots[i].link) {
		        		$(skeleton).attr('nextvid', data.spots[i].link);
			        	$(skeleton).html('<button class="close">X</button><div class="thumb"><img src="/image/A/' + data.spots[i].link +'A.png" /></div></div>');
		        		}
		        	$(skeleton).appendTo($('#canvas'));
			    }
			  });
		return false;
	});
 
	//save spots to server json
	$('#save').click(function(e){
		var current = $("#canvas").attr('vidId');
			var links = [current];

			$(".send-video").each(function (index) {
				  var $video = $(this);
				
				  var obj = {
					id: $video.attr("nextVid"),
					left: $video.offset().left,
					top: $video.offset().top,
					width: $video.width(),
					height: $video.height(),
					link: $video.attr("nextVid")
			  };
			
			  links.push(obj);
		});
		
		message('emitted \'' + JSON.stringify(links) + '\'');
		socket.emit('setup event', links);
		
		return false;
	});

	//delete individual spots - controlled in sidebar
	$('.close').click(function () {
		console.log('close clicked');
	    $(this).parent().remove();
	    return false;
	});

	//clear all spots - controlled in sidebar
	$('#clear').click(function() {
		console.log('clear clicked');
	    $("div.send-video").remove();
	    return false; 
	});
});

// if someone hits esc, escape from positioning boxes
// $( document ).keypress( function( e ){
//   if( e == 27 )
//   	console.log('escape');
//   	$(document).trigger( 'mouseup' );
// } ) 


</script>

<script>



// //upload new video to server - this is a feature under development.
// $(document).on('click','#uploadButton', function (e) {
// 	console.log('upload clicked');
// 	var	fileSize
// 		, fileName
// 		, file
// 		, reader = new FileReader()
// 		;
	
// 	$('#fileBox').on('change', function(e) {
		
// 		fileName= $(this).val();
// 		fileSize = this.files[0].size;
// 		file = this.files[0];
		
// 		$('#nameBox').val(fileName);	
		
// 	});
	
	
// 	$('#uploadPanel').removeClass('hidden').dialog({
// 		modal:true,
// 		width:500,
// 		 buttons: [{
// 		 	text: "Cancel",
// 		 	click: function(){
// 				$(this).dialog("destroy");
// 				$('#uploadPanel').addClass('hidden');
// 				$('#fileBox').val('');
// 				$('#nameBox').val('');	
// 		 	}
// 		 	},
// 		 	{
// 		 	text: "Upload",
// 		 	click: function(){
		 					
// 		 	if ($('#fileBox').val() != "")
// 			 	{

				
// // 			 		reader.onload = function(evnt){
// // 						message('emitted \'' + JSON.stringify(evnt) + '\'');
// // 						socket.emit('Upload', { 'Name' : fileName, 'Data' : evnt.target.result });
// //       				}
// // 					
// // 					socket.emit('Start', { 'Name' : fileName, 'Size' : fileSize });
// // 					message('fileSize '+fileSize);
// // 					reader.readAsDataURL(file);
// // 					
// // 		 			$(this).dialog("destroy");
// // 				 	$('#uploadPanel').addClass('hidden');
// // 				 	$('#fileBox').val('');
// 			 	}
//  			else 
//  				{
//  				 $('#nameBox').val("Please choose a file.");
// 				}
				
// 		 	}
// 		 }]
// 	});

</script>